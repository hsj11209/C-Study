##  클래스와 객체
### 두개의 값을 바꿔주는 함수가 있음
```
#include <iostream>

using namespace std;

class Player
{
public: // public을 붙여야 외부에서 접근이 가능
	int health;
	int power;
};

int main()
{
	Player player0{ 200,100 }; // player0은 객체player의 인스턴스화
	player0.health = 100;

	cout << player0.health << endl;
}

```
### Player player0{ 200,100 } 은 객체를 인스턴스화 한다는 뜻
### public으로 선언하면 외부에서 접근이 
```
#include <iostream>

using std::cout;
using std::endl;

template<typename T>
void _swap(T& x, T& y)
{
	T temp = x;
	x = y;
	y = temp;
}
int main() 
{
	int x = 10, y = 20;
	_swap(x, y);
	cout << x << endl;
	cout << y << endl;
}
```
#### typename -> class로 변경 가능

#### 위 부분 자체는 함수가 아님 함수 template임(type을 parater로 넘김 -> type을 선언하는 위치에 T가 있음)
```
template<typename T>
void _swap(T& x, T& y)
{
	T temp = x;
	x = y;
	y = temp;
}
```

#### 이런 식으로 호출하는 순간 함수 코드가 생성됨
```
_swap(x, y);
```

#### int를 parameter로 들어가서 아래와 같이 컴파일 타임에 암시적으로 추론 
```
_swap<int>(x, y);
```

#### Template은 일반화 프로그래밍(Generic programing)을 가능하게 해줌
#### 타입에 의존하지 않고 하나의 값을 여러 데이터 타입을 가져 재사용성을 높이는 방식

#### type이 아닌 값을 넣을 수 있음 template parameter는 <>를 통해 전달
```
#include <iostream>

using std::cout;
using std::endl;

template<int N>
int num()
{
	return N;
}
int main() 
{
	cout << num<5>() << endl;
}

```

##  사용 예시
### func을 호출 할 때  컴파일러가 N을 추론함 컴파일 때 추론하니 정적 배열만 가능
```
#include <iostream>

using std::cout;
using std::endl;

template<int N>
int func(int(&nums)[N])
{
	return N;
}
int main() 
{
	int nums[] = { 1,2,3 };
	cout << func(nums) << endl;
}
```

### type또한 추가로 가능
```
#include <iostream>

using std::cout;
using std::endl;

template<int N,typename T>
T func(T (&nums)[N])
{
	return N;
}
int main() 
{
	int nums[100] = { 1,2,3 };
	cout << func(nums) << endl;
}
```


